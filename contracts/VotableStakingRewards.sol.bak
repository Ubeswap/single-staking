// SPDX-License-Identifier: MIT

pragma solidity ^0.8.16;

import "@openzeppelin/contracts/utils/math/Math.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./interfaces/IRomulusDelegate.sol";
import "./interfaces/IStakingRewards.sol";
import "./RewardsDistributionRecipient.sol";
import "./Voter.sol";
import "./interfaces/IPoolManager.sol";

struct GaugeData {
  uint256 lockDuration;
  uint256 lockTime;
  mapping(address => uint256) userLocked;
  mapping(address => mapping(uint256 => uint256)) userWeights;
  mapping(uint256 => uint256) poolWeights;
}

library GaugeLibrary {
  /// @notice Returns whether the contract is currently locked.
  function isLocked(GaugeData storage self) public view returns (bool) {
    uint256 timeElapsed = block.timestamp - self.lockTime;
    return timeElapsed < self.lockDuration;
  }

  /// @notice Allocates staked tokens towards a pool. If `lock` is called, these tokens will be
  /// locked for `lockDuration` seconds.
  function allocatePoolWeight(
    GaugeData storage self,
    uint256 poolId,
    uint256 amount
  ) public {
    require(
      amount + self.userLocked[msg.sender] <= this.balanceOf(msg.sender),
      "Allocating too much"
    );

    self.userLocked[msg.sender] = self.userLocked[msg.sender].add(amount);
    self.userWeights[msg.sender][poolId] = self.userWeights[msg.sender][poolId].add(amount);
    self.poolWeights[poolId] = self.poolWeights[poolId].add(amount);
  }

  /// @notice Removes staked tokens from a pool and unlocks them.
  function removePoolWeight(
    GaugeData storage self,
    uint256 poolId,
    uint256 amount
  ) public {
    require(!GaugeLibrary.isLocked(self), "Period locked");
    require(self.userWeights[msg.sender][poolId] >= amount, "Removing too much");

    self.userLocked[msg.sender] = self.userLocked[msg.sender].sub(amount);
    self.userWeights[msg.sender][poolId] = self.userWeights[msg.sender][poolId].sub(amount);
    self.poolWeights[poolId] = self.poolWeights[poolId].sub(amount);
  }

  /* ========== RESTRICTED FUNCTIONS ========== */

  function syncWeights(
    GaugeData storage self,
    uint256 start,
    uint256 end
  ) public {
    uint256 poolsCount = self.poolManager.poolsCount();
    if (end > poolsCount) {
      end = poolsCount;
    }
    for (uint256 i = start; i < end; i++) {
      self.poolManager.setWeight(self.poolManager.poolsByIndex(i), self.poolWeights[i]);
    }
  }

  function lock(GaugeData storage self) public {
    require(!self.isLocked(), "Already locked");
    self.lockTime = block.timestamp;
  }

  function setLockDuration(GaugeData storage self, uint256 _lockDuration) public {
    self.lockDuration =  _lockDuration;
  }
}

// Base: https://github.com/Ubeswap/ubeswap-farming/blob/master/contracts/synthetix/contracts/StakingRewards.sol
contract VotableStakingRewards is
  IStakingRewards,
  RewardsDistributionRecipient,
  ReentrancyGuard
{
  using SafeMath for uint256;
  using SafeERC20 for IERC20;

  /* ========== STATE VARIABLES ========== */

  IERC20 public rewardsToken;
  IERC20 public stakingToken;
  uint256 public periodFinish = 0;
  uint256 public rewardRate = 0;
  uint256 public rewardsDuration = 7 days;
  uint256 public lastUpdateTime;
  uint256 public rewardPerTokenStored;
  GaugeData public gaugeData;

  IRomulusDelegate public immutable romulusDelegate;
  IPoolManager public poolManager;
  mapping(address => uint256) public userRewardPerTokenPaid;
  mapping(address => uint256) public rewards;

  uint256 private _totalSupply;
  mapping(address => uint256) private _balances;
  mapping(address => Voter) public voters;

  /* ========== CONSTRUCTOR ========== */

  constructor(
    address _owner,
    address _rewardsDistribution,
    address _rewardsToken,
    address _stakingToken,
    IRomulusDelegate _romulusDelegate,
    uint256 _lockDuration
  ) Owned(_owner) {
    rewardsToken = IERC20(_rewardsToken);
    stakingToken = IERC20(_stakingToken);
    rewardsDistribution = _rewardsDistribution;
    romulusDelegate = _romulusDelegate;
    gaugeData.lockDuration = _lockDuration;
  }

  /* ========== VIEWS ========== */

  /// @notice Returns the total amount of tokens staked into the contract
  function totalSupply() external view override returns (uint256) {
    return _totalSupply;
  }

  /**
   * @notice Returns the total amount of tokens a user has staked
   * @param account The address of the account to check balance of
   */
  function balanceOf(address account) external view override returns (uint256) {
    return _balances[account];
  }

  /// @notice Returns the remaining time that the reward rate is available
  function lastTimeRewardApplicable() public view override returns (uint256) {
    if (block.timestamp < periodFinish) {
      return block.timestamp;
    } else {
      return periodFinish;
    }
  }

  /// @notice Returns projected amount of rewards to be gained over time per token
  function rewardPerToken() public view override returns (uint256) {
    if (_totalSupply == 0) {
      return rewardPerTokenStored;
    }
    return
      rewardPerTokenStored.add(
        lastTimeRewardApplicable()
          .sub(lastUpdateTime)
          .mul(rewardRate)
          .mul(1e18)
          .div(_totalSupply)
      );
  }

  /// @notice Returns the total amount of rewards 'account' has earned in rewards
  function earned(address account) public view override returns (uint256) {
    return
      _balances[account]
        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))
        .div(1e18)
        .add(rewards[account]);
  }

  /// @notice Returns amount of rewards available in the current period
  function getRewardForDuration() external view override returns (uint256) {
    return rewardRate.mul(rewardsDuration);
  }

  /* ========== MUTATIVE FUNCTIONS ========== */

  /**
   * @notice Stakes tokens into contract from 'msg.sender'
   * @param amount The amount of tokens to stake
   */
  function stake(uint256 amount)
    external
    override
    nonReentrant
    updateReward(msg.sender)
  {
    require(amount > 0, "Cannot stake 0");
    _totalSupply = _totalSupply.add(amount); //do this at the end? to make sure everything proceeds correctly
    _balances[msg.sender] = _balances[msg.sender].add(amount);

    if (address(voters[msg.sender]) == address(0)) {
      voters[msg.sender] = new Voter(
        IVotingDelegates(address(stakingToken)),
        romulusDelegate
      );
    }

    Voter v = voters[msg.sender];
    stakingToken.safeTransferFrom(msg.sender, address(v), amount);
    emit Staked(msg.sender, amount);
  }

  /**
   * @notice Withdraws staked tokens to 'msg.sender'
   * @param amount The amount to withdraw
   */
  function withdraw(uint256 amount)
    public
    override
    nonReentrant
    updateReward(msg.sender)
    hasVoter()
  {
    require(amount > 0, "Cannot withdraw 0");
    uint256 withdrawable = this.balanceOf(msg.sender) - gaugeData.userLocked[msg.sender];
    require(amount <= withdrawable, "Withdrawing more than available");
    _totalSupply = _totalSupply.sub(amount);
    _balances[msg.sender] = _balances[msg.sender].sub(amount);
    Voter v = voters[msg.sender];
    v.removeVotes(msg.sender, amount);
    emit Withdrawn(msg.sender, amount);
  }

  /// @notice Claims rewards of 'msg.sender'
  function getReward() public override nonReentrant updateReward(msg.sender) {
    uint256 reward = rewards[msg.sender];
    if (reward > 0) {
      rewards[msg.sender] = 0;
      rewardsToken.safeTransfer(msg.sender, reward);
      emit RewardPaid(msg.sender, reward);
    }
  }

  /// @notice Withdraws all staked tokens and claims any pending rewards
  function exit() external override {
    withdraw(_balances[msg.sender]);
    getReward();
  }

  /* ========== RESTRICTED FUNCTIONS ========== */

  function notifyRewardAmount(uint256 reward)
    external
    override
    onlyRewardsDistribution
    updateReward(address(0))
  {
    if (block.timestamp >= periodFinish) {
      rewardRate = reward.div(rewardsDuration);
    } else {
      uint256 remaining = periodFinish.sub(block.timestamp);
      uint256 leftover = remaining.mul(rewardRate);
      rewardRate = reward.add(leftover).div(rewardsDuration);
    }

    // Ensure the provided reward amount is not more than the balance in the contract.
    // This keeps the reward rate in the right range, preventing overflows due to
    // very high values of rewardRate in the earned and rewardsPerToken functions;
    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.
    uint256 balance = rewardsToken.balanceOf(address(this));
    require(
      rewardRate <= balance.div(rewardsDuration),
      "Provided reward too high"
    );

    lastUpdateTime = block.timestamp;
    periodFinish = block.timestamp.add(rewardsDuration);
    emit RewardAdded(reward);
  }

  // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders
  function recoverERC20(address tokenAddress, uint256 tokenAmount)
    external
    onlyOwner
  {
    require(
      tokenAddress != address(stakingToken),
      "Cannot withdraw the staking token"
    );
    IERC20(tokenAddress).safeTransfer(owner, tokenAmount);
    emit Recovered(tokenAddress, tokenAmount);
  }

  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
    require(block.timestamp > periodFinish, "Previous rewards still in progress");
    rewardsDuration = _rewardsDuration;
    emit RewardsDurationUpdated(rewardsDuration);
  }

  /// @notice Creates a proposal from the voter of 'msg.sender'
  function propose(
    address[] memory targets,
    uint256[] memory values,
    string[] memory signatures,
    bytes[] memory calldatas,
    string memory description
    ) external hasVoter() {
    voters[msg.sender].propose(
      targets,
      values,
      signatures,
      calldatas,
      description
    );
  }

  /**
  * @notice Casts vote for/against/abstain proposal using voter of 'msg.sender'
  * @param proposalId id of the proposal to vote for/against/abstain
  * @param support - If 0, vote against - If 1, vote for - If 2, abstain
  */
  function castVote(uint256 proposalId, uint8 support) external hasVoter() {
    voters[msg.sender].castVote(proposalId, support);
  }

  /**
  * @notice Delegate votes from voter of `msg.sender` to `delegatee`
  * @param delegatee The address to delegate votes to
  */
  function delegate(address delegatee) external hasVoter() {
    voters[msg.sender].delegate(delegatee);
  }

  /* ========== MODIFIERS ========== */

  modifier updateReward(address account) {
    rewardPerTokenStored = rewardPerToken();
    lastUpdateTime = lastTimeRewardApplicable();
    if (account != address(0)) {
      rewards[account] = earned(account);
      userRewardPerTokenPaid[account] = rewardPerTokenStored;
    }
    _;
  }

  modifier hasVoter() {
    require(address(voters[msg.sender]) != address(0));
    _;
  }

  /* ========== EVENTS ========== */

  event RewardAdded(uint256 reward);
  event Staked(address indexed user, uint256 amount);
  event Withdrawn(address indexed user, uint256 amount);
  event RewardPaid(address indexed user, uint256 reward);
  event RewardsDurationUpdated(uint256 newDuration);
  event Recovered(address token, uint256 amount);
  event DelegateIdxChanged(uint8 previousDelegateIdx, uint8 nextDelegateIdx);
}
